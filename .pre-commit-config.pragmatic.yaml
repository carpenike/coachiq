# Pragmatic pre-commit configuration for development with technical debt
# This config only blocks on NEW issues in CHANGED files
# Use this during active development, switch to full config when cleaning up

# See https://pre-commit.com for full documentation

default_language_version:
  python: python3.12

repos:
  # ===== ALWAYS BLOCKING (Fast, Critical) =====
  # These are quick and catch unambiguous errors
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        exclude: ^(mkdocs\.yml|docs/mkdocs\.yml)$
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: debug-statements
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-added-large-files
        exclude: >
          (?x)^(
            resources/rvc-2023-11\.pdf|
            resources/rvc-2023-11_chunks\.json
          )$

  # ===== DIFF-AWARE BLOCKING (On Changed Files Only) =====

  # Python linting and formatting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.0
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]  # Auto-fix to reduce friction
        types_or: [python, pyi]
      - id: ruff-format
        types_or: [python, pyi]

  # Security scanning - always blocking for medium+ issues
  - repo: https://github.com/PyCQA/bandit
    rev: '1.8.5'
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml", "--severity-level", "medium"]
        additional_dependencies: ["bandit[toml]"]
        types: [python]

  # Frontend linting on staged files only
  - repo: local
    hooks:
      - id: eslint-staged
        name: eslint (staged files)
        entry: bash -c 'cd frontend && npx eslint --fix -- "$@"' --
        language: system
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        exclude: ^frontend/(node_modules|dist|coverage)/
        pass_filenames: true

  # ===== MANUAL/CI-ONLY HOOKS =====
  # These require full project context and are too heavy for every commit

  # Python type checking - moved to manual stage
  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.402
    hooks:
      - id: pyright
        pass_filenames: false
        args: [--project=.]
        stages: [manual]  # Run with: pre-commit run pyright --all-files

  # Frontend full checks - also manual
  - repo: local
    hooks:
      - id: frontend-typecheck-full
        name: TypeScript check (full project)
        entry: bash -c 'cd frontend && npm run typecheck'
        language: system
        pass_filenames: false
        stages: [manual]

      - id: frontend-build-check
        name: Frontend build check
        entry: bash -c 'cd frontend && npm run build'
        language: system
        pass_filenames: false
        stages: [manual]

  # Poetry lock check remains on pre-push as it's important but not blocking
  - repo: local
    hooks:
      - id: check-poetry-lock
        name: poetry-lock-check
        description: "Ensure poetry.lock is in sync with pyproject.toml"
        entry: poetry check --lock
        language: system
        pass_filenames: false
        files: ^(pyproject\.toml|poetry\.lock)$
        stages: [pre-push]
