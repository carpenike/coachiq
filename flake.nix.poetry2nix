# Nix flake definition for rvc2api using poetry2nix
#
# This flake provides:
#
# ▸ A Python-based CANbus FastAPI web service built with Poetry + poetry2nix
# ▸ Unified versioning via pyproject.toml as single source of truth
# ▸ Reproducible developer environments with `devShells.default` and `devShells.ci`
# ▸ CLI apps (run with `nix run .#<name>`) for:
#    - `test`     → run unit tests
#    - `lint`     → run ruff, pyright, djlint
#    - `format`   → run ruff format and djlint in reformat mode
#    - `ci`       → run full gate: pre-commit, tests, lints, poetry lock
#    - `precommit`→ run pre-commit checks across the repo
# ▸ Nix flake checks (via `nix flake check`) for:
#    - pytest suite
#    - style (ruff, pyright, djlint)
#    - lockfile validation (poetry check --lock --no-interaction)
# ▸ Package build output under `packages.<system>.rvc2api`
#
# VERSION MANAGEMENT:
# - pyproject.toml is the SINGLE SOURCE OF TRUTH for version information
# - Release automation via release-please updates pyproject.toml directly
# - Version is extracted from pyproject.toml in this flake
# - No separate VERSION file needed - it may be deprecated

# Best Practices:
# - Canonical version is managed in `VERSION`
# - `pyproject.toml` is pinned to version "0.0.0"
# - Release automation is handled via `release-please`, which updates `VERSION` and `flake.nix`
# - Runtime version is available in the app via `core_daemon._version.VERSION`
#
# Usage (in this repo):
#   nix develop             # Enter the default dev environment
#   nix run .#test          # Run tests
#   nix run .#lint          # Run linter suite
#   nix flake check         # Run CI-grade validation
#   nix build .#rvc2api     # Build the package
#
# Usage (in a system flake or NixOS configuration):
#
#   # In your flake inputs:
#   inputs.rvc2api.url = "github:carpenike/rvc2api";
#
#   # As a package:
#   environment.systemPackages = [ inputs.rvc2api.packages.${system}.rvc2api ];
#
#   # As a NixOS module:
#   imports = [ inputs.rvc2api.nixosModules.rvc2api ];
#   # Then configure it:
#   rvc2api.settings = { ... };
#
#   # Or to reference CLI apps:
#   nix run inputs.rvc2api#check
#
# See docs/nixos-integration.md for more details

{
  description = "rvc2api Python package and devShells";

  inputs = {
    nixpkgs.url     = "github:NixOS/nixpkgs/nixpkgs-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    poetry2nix = {
      url = "github:nix-community/poetry2nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, flake-utils, poetry2nix, ... }:
    let
      # Extract version from pyproject.toml (source of truth)
      version = let
        pyproject = builtins.fromTOML (builtins.readFile ./pyproject.toml);
      in pyproject.tool.poetry.version;

      # Create a function that builds rvc2api for a specific system
      forSystem = system:
        let
          pkgs = import nixpkgs { inherit system; };
          # Explicitly define Python version to match pyproject.toml requirement (^3.12.6)
          python = pkgs.python312;
          pythonPackages = python.pkgs;


         # Import full poetry2nix API (to get built-ins like defaultPoetryOverrides)
        p2nixFns = poetry2nix.lib.mkPoetry2Nix { inherit pkgs; };
        # pull out only the things we actually have
        inherit (p2nixFns)
          mkPoetryApplication
          mkPoetryEnv
          defaultPoetryOverrides
          overrideScope;

          # DRY backend injection for PEP 517 build errors
          backendDeps = {
            setuptools = [
              "babel" "certifi" "cfgv" "charset-normalizer"
              "distlib" "distro" "editorconfig" "frozenlist" "greenlet"
              "h11" "identify" "importlib-resources" "importlib-metadata" "jiter"
              "json5" "jsonpointer" "markdown" "markupsafe" "marshmallow"
              "mergedeep" "multidict" "mypy"
              "nodeenv" "paginate" "pluggy"
              "propcache" "pymupdf" "pyyaml" "regex"
              "six" "sniffio" "tenacity" "tqdm" "types-pyyaml" "verspec" "watchdog" "zipp"
            ];
            hatchling = [
              "annotated-types" "attrs" "backrefs" "colorama" "soupsieve" "urllib3" "filelock" "httpcore" "idna" "iniconfig"
              "jinja2" "mkdocs-material-extensions" "platformdirs" "pygments" "pyparsing" "pymdown-extensions" "pyyaml-env-tag" "ruff"
              "jsbeautifier" "python-dateutil"
            ];
            flit-core = [
              "packaging" "typing-extensions" "click" "mypy-extensions" "pathspec"
            ];
            poetry-core = [
              "aiohappyeyeballs"
            ];
            meson-python = [
              "numpy"
            ];
          };

          backendOverrides = final: prev:
            builtins.foldl'
              (acc: backend:
                acc // builtins.listToAttrs (map
                  (pkg: {
                    name = pkg;
                    value = prev.${pkg}.overridePythonAttrs (old: {
                      nativeBuildInputs = (old.nativeBuildInputs or []) ++ [ prev.${backend} ];
                    });
                  })
                  backendDeps.${backend}))
              {}
              (builtins.attrNames backendDeps);

          manualOverrides = final: prev: {
            hatchling = prev.hatchling.overridePythonAttrs (old: {
              version = "1.27.0";
              src = prev.fetchPypi {
                pname = "hatchling";
                version = "1.27.0";
                sha256 = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
              };
              nativeBuildInputs = (old.nativeBuildInputs or []) ++ [ prev.pluggy ];
              buildInputs = (old.buildInputs or []) ++ [ prev.pluggy ];
              propagatedBuildInputs = (old.propagatedBuildInputs or []) ++ [ prev.pluggy ];
            });
            faiss = prev.faiss.overridePythonAttrs (old: {
              buildInputs       = (old.buildInputs or []) ++ [ pkgs.pkgconfig pkgs.openblas ];
              nativeBuildInputs = (old.nativeBuildInputs or []) ++ [ pkgs.swig ];
            });

            pymupdf = prev.pymupdf.overridePythonAttrs (old: {
              buildInputs = (old.buildInputs or []) ++ [ pkgs.mupdf pkgs.cacert ];
              nativeBuildInputs = (old.nativeBuildInputs or []);
              # Ensure SSL_CERT_FILE is set when building pymupdf
              postPatch = (old.postPatch or "") + ''
                export SSL_CERT_FILE=${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt
              '';
            });
            packaging = prev.packaging.overridePythonAttrs (old: {
              src = prev.fetchPypi {
                pname = "packaging";
                version = "24.2";
                format = "setuptools";
                sha256 = "sha256-wiim3F6TLTRrxXOTeRCdSeiFPdgiNXHHxbVSYO3AuX8=";
              };
              nativeBuildInputs = (old.nativeBuildInputs or []) ++ [ prev.flit-core ];
            });
          };

          customOverrides = final: prev:
            backendOverrides final prev // manualOverrides final prev;

          # Create the application using poetry2nix
          rvc2apiPackage = mkPoetryApplication {
            projectDir = ./.;
            preferWheels = false;
            overrides    = customOverrides;
            # Explicitly set version from pyproject.toml
            version = version;

            # Add system-specific extras
            extraPackages = pkgs.lib.optionals pkgs.stdenv.isLinux [ pkgs.iproute2 ];

            meta = with pkgs.lib; {
              description = "CAN-bus web service exposing RV-C network data via HTTP & WebSocket";
              homepage    = "https://github.com/carpenike/rvc2api";
              license     = licenses.asl20;
              maintainers = [{
                name   = "Ryan Holt";
                email  = "ryan@ryanholt.net";
                github = "carpenike";
              }];
            };
          };

          # Create a Python environment with both main and dev dependencies using poetry2nix
          poetryEnv = mkPoetryEnv {
            projectDir = ./.;
            preferWheels = false;
            overrides    = customOverrides;
            # Include development groups (note: "main" is not needed as it's implicit)
            groups = ["dev" "devtools"];
            # Additional packages for development
            extraPackages = ps: with ps; [
              # Add any packages that need special handling or aren't in pyproject.toml
            ];
          };

          # Shared system dependencies used across different parts of the flake
          systemLibs = with pkgs; [
            openblas
            stdenv.cc.cc.lib
            zlib
            mupdf
          ] ++ pkgs.lib.optionals pkgs.stdenv.isLinux [
            pkgs.iproute2
            pkgs.can-utils
          ];

          devShell = pkgs.mkShell {
            # Use the Poetry environment created by poetry2nix
            packages = [
              poetryEnv
              pkgs.poetry

              # --- Frontend dependencies ---
              pkgs.nodejs_20

              # --- Development tools ---
              pkgs.pyright  # For Python type checking
              pkgs.fish
              pkgs.cacert
            ];

            env = {
              SSL_CERT_FILE = "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt";
            };

            # System libraries needed by Python packages
            buildInputs = systemLibs;
            shellHook = ''
              export PYTHONPATH=$PWD/src:$PYTHONPATH

              # Set library paths for native libraries
              export LD_LIBRARY_PATH=${pkgs.lib.makeLibraryPath [
                pkgs.stdenv.cc.cc.lib
                pkgs.zlib
                pkgs.openblas
              ]}''${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

              # No need for the poetry function wrapper since we're using poetry2nix

              # Set prompt reliably in bash (including VS Code) and zsh
              if [ -n "$BASH_VERSION" ]; then
                export OLD_PS1="$PS1"
                export PS1="\[\033[1;32m\](poetry2nix)\[\033[0m\] $OLD_PS1"
              elif [ -n "$ZSH_VERSION" ]; then
                export PS1="%F{green}(poetry2nix)%f $PS1"
              fi
              if [ -n "$FISH_VERSION" ] || [ -x "$(command -v fish)" ]; then
                mkdir -p "$HOME/.config/fish/conf.d"
                cat > "$HOME/.config/fish/conf.d/nix_devshell_prompt.fish" <<'EOF'
function fish_prompt
  set_color green
  echo -n "(nix develop) "
  set_color normal
  echo -n (prompt_pwd) " > "
end
EOF
                if [ -n "$FISH_VERSION" ]; then
                  source "$HOME/.config/fish/conf.d/nix_devshell_prompt.fish"
                fi
              fi
              # Set up Node.js environment
              export NODE_PATH=$PWD/web_ui/node_modules

              echo "🐚 Entered rvc2api devShell on ${pkgs.system} with Python ${python.version} and Node.js $(node --version)"
              echo "💡 Backend commands:"
              echo "  • poetry install              # Install Python dependencies (now always uses correct LD_LIBRARY_PATH)"
              echo "  • poetry run python src/core_daemon/main.py  # Run API server"
              echo "  • poetry run pytest           # Run tests"
              echo "  • poetry run ruff check .     # Lint"
              echo "  • poetry run ruff format src  # Format"
              echo "  • npx pyright src             # Type checking"
              echo ""
              echo "💡 Frontend commands:"
              echo "  • cd web_ui && npm install    # Install frontend dependencies"
              echo "  • cd web_ui && npm run dev    # Start React dev server"
              echo "  • cd web_ui && npm run build  # Build production frontend"
              echo ""
              echo "💡 Dev Tools commands:"
              echo "  • poetry install --with devtools  # Install dev tools dependencies"
              echo "  • python dev_tools/generate_embeddings.py  # Process RV-C spec PDF"
              echo "  • python dev_tools/query_faiss.py \"query\"  # Search RV-C spec"

              # Setup frontend if web_ui directory exists
              if [ -d "web_ui" ] && [ ! -d "web_ui/node_modules" ]; then
                echo "🔧 Setting up frontend development environment..."
                (cd web_ui && npm install)
                echo "✅ Frontend dependencies installed"
              fi
            '';
          };

          ciShell = pkgs.mkShell {
            buildInputs = [
              pythonPackages.faiss
            ] ++ pkgs.lib.optionals (pkgs.stdenv.isLinux || pkgs.stdenv.isDarwin) [
              pythonPackages.uvloop
            ] ++ pkgs.lib.optionals pkgs.stdenv.isLinux [
            ];
            shellHook = ''
              sudo ip link set up vcan0  || true
            '';
          };

          apps = {
            precommit = flake-utils.lib.mkApp {
              drv = pkgs.writeShellScriptBin "precommit" ''
                cd $PWD && ${pkgs.pre-commit}/bin/pre-commit run --all-files
              '' // {
                meta = {
                  description = "Run pre-commit checks";
                  maintainers = [ "carpenike" ];
                };
              };
            };

            test = flake-utils.lib.mkApp {
              drv = pkgs.writeShellScriptBin "test" ''
                cd $PWD && ${pkgs.poetry}/bin/poetry run pytest
              '' // {
                meta = {
                  description = "Run pytest suite";
                  maintainers = [ "carpenike" ];
                };
              };
            };

            lint = flake-utils.lib.mkApp {
              drv = pkgs.writeShellScriptBin "lint" ''
                cd $PWD && \
                  ${pkgs.poetry}/bin/poetry run ruff check . && \
                  ${pkgs.nodejs_20}/bin/npx pyright src && \
                  ${pkgs.poetry}/bin/poetry run djlint src/core_daemon/templates --check
              '' // {
                meta = {
                  description = "Run ruff and pyright";
                  maintainers = [ "carpenike" ];
                };
              };
            };

            format = flake-utils.lib.mkApp {
              drv = pkgs.writeShellScriptBin "format" ''
                cd $PWD && \
                  ${pkgs.poetry}/bin/poetry run ruff format src && \
                  ${pkgs.poetry}/bin/poetry run djlint src/core_daemon/templates --reformat
              '' // {
                meta = {
                  description = "Format Python and Jinja code";
                  maintainers = [ "carpenike" ];
                };
              };
            };

            build-frontend = flake-utils.lib.mkApp {
              drv = pkgs.writeShellScriptBin "build-frontend" ''
                cd $PWD && ${pkgs.poetry}/bin/poetry run python scripts/build_frontend.py
              '' // {
                meta = {
                  description = "Build the frontend assets";
                  maintainers = [ "carpenike" ];
                };
              };
            };

            # single "nix run .#ci entrypoint for CI
            ci = flake-utils.lib.mkApp {
              drv = pkgs.writeShellScriptBin "ci" ''
                set -e
                cd $PWD
                echo "===> Checking Poetry lock file consistency"
                ${pkgs.poetry}/bin/poetry check --lock --no-interaction

                echo "===> Running pre-commit checks"
                ${pkgs.pre-commit}/bin/pre-commit run --all-files

                echo "===> Running unit tests"
                ${poetryEnv}/bin/pytest

                echo "===> Running linters"
                ${poetryEnv}/bin/ruff check .
                ${pkgs.nodejs_20}/bin/npx pyright src
                ${poetryEnv}/bin/djlint src/core_daemon/templates --check
              '' // {
                meta = {
                  description = "Run full CI gate (pre-commit, tests, lints)";
                  maintainers = [ "carpenike" ];
                };
              };
            };
          };

          checks = {
            # Comprehensive poetry lock and configuration validation
            poetry-lock-check = pkgs.runCommand "poetry-lock-check" {
              buildInputs = [ pkgs.poetry ];
            } ''
              cd ${self}
              ${pkgs.poetry}/bin/poetry check --lock --no-interaction
              touch $out
            '';
          };

          _module = {
            args = {
              rvc2apiPackage = rvc2apiPackage;
            };
          };
        in {
          packages = {
            rvc2api = rvc2apiPackage;
            default = rvc2apiPackage;
          };

          devShells = {
            default = devShell;
            ci      = ciShell;
          };

          apps   = apps;
          checks = checks;

          _module = {
            args = {
              rvc2apiPackage = rvc2apiPackage;
            };
          };
        };

    in flake-utils.lib.eachDefaultSystem forSystem // {
      # NixOS module is now outside of eachDefaultSystem and can reference packages properly
      nixosModules.rvc2api = { config, lib, pkgs, ... }: {
        options.rvc2api = {
          enable = lib.mkEnableOption "Enable rvc2api RV-C network server";

          package = lib.mkOption {
            type = lib.types.package;
            default = config._module.args.rvc2apiPackage;
            description = "The rvc2api package to use";
          };

          settings = {
            pushover = {
              enable = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Enable Pushover integration";
              };
              apiToken = lib.mkOption {
                type = lib.types.str;
                default = "";
                description = "Pushover API token";
              };
              userKey = lib.mkOption {
                type = lib.types.str;
                default = "";
                description = "Pushover user key";
              };
              device = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "Pushover device name (optional)";
              };
              priority = lib.mkOption {
                type = lib.types.nullOr lib.types.int;
                default = null;
                description = "Pushover message priority (optional)";
              };
            };

            uptimerobot = {
              enable = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Enable UptimeRobot integration";
              };
              apiKey = lib.mkOption {
                type = lib.types.str;
                default = "";
                description = "UptimeRobot API key";
              };
            };

            journald = {
              enable = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Enable systemd journal integration";
              };
              identifier = lib.mkOption {
                type = lib.types.str;
                default = "rvc2api";
                description = "systemd journal identifier";
              };
            };

            prometheus = {
              enable = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Enable Prometheus metrics endpoint";
              };
              port = lib.mkOption {
                type = lib.types.port;
                default = 8000;
                description = "Port to serve prometheus metrics on";
              };
            };

            server = {
              development = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Enable development mode";
              };
              port = lib.mkOption {
                type = lib.types.port;
                default = 8000;
                description = "API server port";
              };
              host = lib.mkOption {
                type = lib.types.str;
                default = "0.0.0.0";
                description = "API server listen address";
              };
              logLevel = lib.mkOption {
                type = lib.types.enum [ "debug" "info" "warning" "error" "critical" ];
                default = "info";
                description = "Logging level";
              };
            };

            can = {
              interface = lib.mkOption {
                type = lib.types.str;
                default = "can0";
                description = "CAN bus interface name";
              };
              bitrate = lib.mkOption {
                type = lib.types.int;
                default = 250000;
                description = "CAN bus bitrate";
              };
              retries = lib.mkOption {
                type = lib.types.int;
                default = 3;
                description = "Number of retries for CAN operations";
              };
              retrySleepTime = lib.mkOption {
                type = lib.types.int;
                default = 1;
                description = "Sleep time between retries in seconds";
              };
            };
          };
        };

        config = lib.mkIf config.rvc2api.enable {
          environment.systemPackages = [ config.rvc2api.package ];

          # Setup environment variables
          systemd.services.rvc2api = {
            description = "RVC2API web service";
            wantedBy = [ "multi-user.target" ];
            after = [ "network.target" ];
            serviceConfig = {
              ExecStart = "${config.rvc2api.package}/bin/rvc2api-daemon";
              Restart = "on-failure";
              User = "root";
              Group = "root";
              # Enable KillMode=mixed for proper process cleanup
              KillMode = "mixed";
              # Add capability for CAN bus access (needed for socketcan)
              AmbientCapabilities = [ "CAP_NET_ADMIN" ];
            };
            environment = {
              RVC2API_SERVER_PORT = toString config.rvc2api.settings.server.port;
              RVC2API_SERVER_HOST = config.rvc2api.settings.server.host;
              RVC2API_SERVER_LOGLEVEL = config.rvc2api.settings.server.logLevel;
              RVC2API_SERVER_DEVELOPMENT = lib.boolToString config.rvc2api.settings.server.development;

              RVC2API_CAN_INTERFACE = config.rvc2api.settings.can.interface;
              RVC2API_CAN_BITRATE = toString config.rvc2api.settings.can.bitrate;
              RVC2API_CAN_RETRIES = toString config.rvc2api.settings.can.retries;
              RVC2API_CAN_RETRY_SLEEP_TIME = toString config.rvc2api.settings.can.retrySleepTime;

              # Optional integrations
              RVC2API_PUSHOVER_ENABLE = lib.boolToString config.rvc2api.settings.pushover.enable;
              RVC2API_PUSHOVER_API_TOKEN = config.rvc2api.settings.pushover.apiToken;
              RVC2API_PUSHOVER_USER_KEY = config.rvc2api.settings.pushover.userKey;
              RVC2API_PUSHOVER_DEVICE = lib.mkIf (config.rvc2api.settings.pushover.device != null)
                config.rvc2api.settings.pushover.device;
              RVC2API_PUSHOVER_PRIORITY = lib.mkIf (config.rvc2api.settings.pushover.priority != null)
                (toString config.rvc2api.settings.pushover.priority);

              RVC2API_UPTIMEROBOT_ENABLE = lib.boolToString config.rvc2api.settings.uptimerobot.enable;
              RVC2API_UPTIMEROBOT_API_KEY = config.rvc2api.settings.uptimerobot.apiKey;

              RVC2API_JOURNALD_ENABLE = lib.boolToString config.rvc2api.settings.journald.enable;
              RVC2API_JOURNALD_IDENTIFIER = config.rvc2api.settings.journald.identifier;

              RVC2API_PROMETHEUS_ENABLE = lib.boolToString config.rvc2api.settings.prometheus.enable;
              RVC2API_PROMETHEUS_PORT = toString config.rvc2api.settings.prometheus.port;
            };
          };
        };
      };
    };
}
