"""unify_schemas_and_add_entity_state

Revision ID: 5537d057c7dd
Revises: 167f01dae3e4
Create Date: 2025-06-10 20:14:19.410629

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5537d057c7dd"
down_revision: str | None = "167f01dae3e4"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create new tables (these work fine)
    op.create_table(
        "entity_states",
        sa.Column(
            "entity_id",
            sa.String(length=255),
            nullable=False,
            comment="Unique identifier (e.g., 'light.living_room_main', 'tank.fresh_water')",
        ),
        sa.Column(
            "state",
            sa.JSON(),
            nullable=False,
            comment="Complete entity state as JSON (value, raw, state, capabilities, etc.)",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Last state update timestamp",
        ),
        sa.Column(
            "device_type",
            sa.String(length=50),
            nullable=True,
            comment="Device type for faster querying (light, tank, pump, etc.)",
        ),
        sa.Column(
            "suggested_area",
            sa.String(length=100),
            nullable=True,
            comment="Physical area/location of the entity",
        ),
        sa.PrimaryKeyConstraint("entity_id"),
    )
    op.create_index(
        op.f("ix_entity_states_updated_at"), "entity_states", ["updated_at"], unique=False
    )

    op.create_table(
        "system_settings",
        sa.Column(
            "key",
            sa.String(length=255),
            nullable=False,
            comment="Setting key (e.g., 'active_coach_model', 'user_patches_file')",
        ),
        sa.Column(
            "value",
            sa.String(length=4000),
            nullable=False,
            comment="Setting value (stored as string, parsed as needed)",
        ),
        sa.Column(
            "last_modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Last modification timestamp",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Human-readable description of the setting",
        ),
        sa.PrimaryKeyConstraint("key"),
    )

    op.create_table(
        "user_settings",
        sa.Column(
            "key",
            sa.String(length=255),
            nullable=False,
            comment="Setting key (e.g., 'entity.light.living_room.display_name')",
        ),
        sa.Column(
            "value",
            sa.String(length=4000),
            nullable=False,
            comment="Setting value (stored as string, parsed as needed)",
        ),
        sa.Column(
            "last_modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Last modification timestamp",
        ),
        sa.Column(
            "category",
            sa.String(length=100),
            nullable=True,
            comment="Setting category for grouping (ui, entity, dashboard, etc.)",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Human-readable description of the setting",
        ),
        sa.PrimaryKeyConstraint("key"),
    )

    # SQLite-compatible schema updates using table recreation
    # Note: ALTER COLUMN not supported in SQLite, so we'll recreate tables

    # 1. Update backup_metadata table to use UUID instead of NUMERIC
    op.execute("CREATE TABLE backup_metadata_new AS SELECT * FROM backup_metadata")
    op.drop_table("backup_metadata")
    op.create_table(
        "backup_metadata",
        sa.Column("id", sa.String(length=36), nullable=False, comment="Primary key UUID"),
        sa.Column(
            "file_path", sa.String(length=500), nullable=False, comment="Full path to backup file"
        ),
        sa.Column(
            "file_size_bytes", sa.Integer(), nullable=False, comment="Backup file size in bytes"
        ),
        sa.Column(
            "database_name",
            sa.String(length=255),
            nullable=False,
            comment="Name of the backed up database",
        ),
        sa.Column(
            "backup_type",
            sa.String(length=50),
            nullable=False,
            comment="Type of backup (manual, automatic, scheduled)",
        ),
        sa.Column(
            "checksum",
            sa.String(length=64),
            nullable=True,
            comment="SHA-256 checksum of backup file",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # Copy data back (generate new UUIDs for existing records)
    op.execute("""
        INSERT INTO backup_metadata (id, file_path, file_size_bytes, database_name, backup_type, checksum, created_at, updated_at)
        SELECT
            lower(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(6))),
            file_path, file_size_bytes, database_name,
            COALESCE(backup_type, 'manual'),
            checksum,
            COALESCE(created_at, CURRENT_TIMESTAMP),
            COALESCE(updated_at, CURRENT_TIMESTAMP)
        FROM backup_metadata_new
    """)
    op.drop_table("backup_metadata_new")

    # 2. Update configurations table to add namespace and use UUID
    op.execute("CREATE TABLE configurations_new AS SELECT * FROM configurations")
    op.drop_table("configurations")
    op.create_table(
        "configurations",
        sa.Column("id", sa.String(length=36), nullable=False, comment="Primary key UUID"),
        sa.Column(
            "namespace", sa.String(length=100), nullable=False, comment="Configuration namespace"
        ),
        sa.Column("key", sa.String(length=255), nullable=False, comment="Configuration key"),
        sa.Column(
            "value",
            sa.String(length=4000),
            nullable=False,
            comment="Configuration value (JSON string)",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Human-readable description",
        ),
        sa.Column(
            "category",
            sa.String(length=100),
            nullable=True,
            comment="Configuration category for grouping",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace", "key", name="uq_configuration_namespace_key"),
    )
    # Copy data back with default namespace
    op.execute("""
        INSERT INTO configurations (id, namespace, key, value, description, category, created_at, updated_at)
        SELECT
            lower(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(6))),
            'default',
            key, value, description, category,
            COALESCE(created_at, CURRENT_TIMESTAMP),
            COALESCE(updated_at, CURRENT_TIMESTAMP)
        FROM configurations_new
    """)
    op.drop_table("configurations_new")

    # 3. Update dashboards table to use UUID
    op.execute("CREATE TABLE dashboards_new AS SELECT * FROM dashboards")
    op.drop_table("dashboards")
    op.create_table(
        "dashboards",
        sa.Column("id", sa.String(length=36), nullable=False, comment="Primary key UUID"),
        sa.Column("name", sa.String(length=255), nullable=False, comment="Dashboard name"),
        sa.Column(
            "config",
            sa.String(length=10000),
            nullable=False,
            comment="Dashboard configuration (JSON string)",
        ),
        sa.Column(
            "is_default",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is the default dashboard",
        ),
        sa.Column(
            "description", sa.String(length=500), nullable=True, comment="Dashboard description"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # Copy data back
    op.execute("""
        INSERT INTO dashboards (id, name, config, is_default, description, created_at, updated_at)
        SELECT
            lower(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(2)) || '-' || hex(randomblob(6))),
            name, config,
            COALESCE(is_default, 0),
            description,
            COALESCE(created_at, CURRENT_TIMESTAMP),
            COALESCE(updated_at, CURRENT_TIMESTAMP)
        FROM dashboards_new
    """)
    op.drop_table("dashboards_new")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop new tables first
    op.drop_index(op.f("ix_entity_states_updated_at"), table_name="entity_states")
    op.drop_table("entity_states")
    op.drop_table("user_settings")
    op.drop_table("system_settings")

    # Revert existing tables to original schema
    # Note: This is a destructive operation and will lose UUID mappings

    # 1. Revert dashboards table
    op.execute("CREATE TABLE dashboards_old AS SELECT * FROM dashboards")
    op.drop_table("dashboards")
    op.create_table(
        "dashboards",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("config", sa.String(length=10000), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute("""
        INSERT INTO dashboards (id, name, config, is_default, description, created_at, updated_at)
        SELECT ROW_NUMBER() OVER (), name, config, is_default, description, created_at, updated_at
        FROM dashboards_old
    """)
    op.drop_table("dashboards_old")

    # 2. Revert configurations table
    op.execute("CREATE TABLE configurations_old AS SELECT * FROM configurations")
    op.drop_table("configurations")
    op.create_table(
        "configurations",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("key", sa.String(length=255), nullable=False),
        sa.Column("value", sa.String(length=4000), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("category", sa.String(length=100), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute("""
        INSERT INTO configurations (id, key, value, description, category, created_at, updated_at)
        SELECT ROW_NUMBER() OVER (), key, value, description, category, created_at, updated_at
        FROM configurations_old
    """)
    op.drop_table("configurations_old")

    # 3. Revert backup_metadata table
    op.execute("CREATE TABLE backup_metadata_old AS SELECT * FROM backup_metadata")
    op.drop_table("backup_metadata")
    op.create_table(
        "backup_metadata",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("file_path", sa.String(length=500), nullable=False),
        sa.Column("file_size_bytes", sa.Integer(), nullable=False),
        sa.Column("database_name", sa.String(length=255), nullable=False),
        sa.Column("backup_type", sa.String(length=50), nullable=False),
        sa.Column("checksum", sa.String(length=64), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute("""
        INSERT INTO backup_metadata (id, file_path, file_size_bytes, database_name, backup_type, checksum, created_at, updated_at)
        SELECT ROW_NUMBER() OVER (), file_path, file_size_bytes, database_name, backup_type, checksum, created_at, updated_at
        FROM backup_metadata_old
    """)
    op.drop_table("backup_metadata_old")

    # ### end Alembic commands ###
